/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Faucet, FaucetInterface } from "../../Faucet.sol/Faucet";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "amountAllowed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "donateTofaucet",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_requestor",
        type: "address",
      },
    ],
    name: "requestTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newAmountAllowed",
        type: "uint256",
      },
    ],
    name: "setAmountallowed",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405267016345785d8a0000600155336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506106598061005f6000396000f3fe6080604052600436106100555760003560e01c806313af40351461005a578063580f390414610083578063605e73cd1461009f5780638da5cb5b146100a95780639ad2cd14146100d4578063f3aa52a1146100ff575b600080fd5b34801561006657600080fd5b50610081600480360381019061007c919061038c565b610128565b005b61009d600480360381019061009891906103b5565b6101f9565b005b6100a7610289565b005b3480156100b557600080fd5b506100be61028b565b6040516100cb919061046b565b60405180910390f35b3480156100e057600080fd5b506100e96102af565b6040516100f691906104c6565b60405180910390f35b34801561010b57600080fd5b50610126600480360381019061012191906103de565b6102b5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ad90610486565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600154471161023d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610234906104a6565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc6001549081150290604051600060405180830381858888f19350505050158015610285573d6000803e3d6000fd5b5050565b565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610343576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033a90610486565b60405180910390fd5b8060018190555050565b60008135905061035c816105de565b92915050565b600081359050610371816105f5565b92915050565b6000813590506103868161060c565b92915050565b60006020828403121561039e57600080fd5b60006103ac8482850161034d565b91505092915050565b6000602082840312156103c757600080fd5b60006103d584828501610362565b91505092915050565b6000602082840312156103f057600080fd5b60006103fe84828501610377565b91505092915050565b610410816104f2565b82525050565b60006104236022836104e1565b915061042e82610540565b604082019050919050565b6000610446602d836104e1565b91506104518261058f565b604082019050919050565b61046581610536565b82525050565b60006020820190506104806000830184610407565b92915050565b6000602082019050818103600083015261049f81610416565b9050919050565b600060208201905081810360008301526104bf81610439565b9050919050565b60006020820190506104db600083018461045c565b92915050565b600082825260208201905092915050565b60006104fd82610516565b9050919050565b600061050f82610516565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f60008201527f6e2e000000000000000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f7567682066756e647320696e20746865206661756365742e2060008201527f506c6561736520646f6e61746500000000000000000000000000000000000000602082015250565b6105e7816104f2565b81146105f257600080fd5b50565b6105fe81610504565b811461060957600080fd5b50565b61061581610536565b811461062057600080fd5b5056fea26469706673582212209d6773a0b8d99138e1cdfeb304c800c0f7f54fdf55c0c3561d31a4681808832964736f6c63430008040033";

type FaucetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FaucetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Faucet__factory extends ContractFactory {
  constructor(...args: FaucetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Faucet> {
    return super.deploy(overrides || {}) as Promise<Faucet>;
  }
  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Faucet {
    return super.attach(address) as Faucet;
  }
  override connect(signer: Signer): Faucet__factory {
    return super.connect(signer) as Faucet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FaucetInterface {
    return new utils.Interface(_abi) as FaucetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Faucet {
    return new Contract(address, _abi, signerOrProvider) as Faucet;
  }
}
